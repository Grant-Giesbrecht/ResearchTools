#!/usr/local/bin/python3

# If user has copied a path, this will change the path into an
# os.path.join style universsal thing.
#
#

import pyperclip
from colorama import Fore, Style
import logging
import getopt, sys

#TODO: Could automatically change title
#TODO: Could remove when percent signs and other special characters are done incorrectly
#TODO: Could remove abstract

TEST_MODE = False
LOG_LEVEL = logging.INFO
replacement_indentation = "\t"

FORMAT_MATLAB = False

#-----------------------------------------------------------
# Parse arguments
argv = sys.argv[1:]

try:
	opts, args = getopt.getopt(sys.argv[1:], "h", ["help", "debug", "info", "warning", "error", "critical", "test", "python", "matlab"])
except getopt.GetoptError as err:
	print("--help for help")
	sys.exit(2)
for opt, aarg in opts:
	if opt in ("-h", "--help"):
		print(f"{Fore.RED}Just kidding I haven't made any help text yet. ~~OOPS~~{Style.RESET_ALL}")
		sys.exit()
	elif opt == "--debug":
		LOG_LEVEL = logging.DEBUG
	elif opt == "--info":
		LOG_LEVEL = logging.INFO
	elif opt == "--test":
		TEST_MODE = True
	elif opt == "--python":
		FORMAT_MATLAB = False
	elif opt == "--matlab":
		FORMAT_MATLAB = True
	else:
		assert False, "unhandled option"
	# ...
#-----------------------------------------------------------


tabchar = "    "
prime_color = Fore.YELLOW
standard_color = Fore.WHITE
quiet_color = Fore.LIGHTBLACK_EX
cspecial = Fore.GREEN # COlor used to highlight content inside logging messages
logging.basicConfig(format=f'{prime_color}%(levelname)s:{standard_color} %(message)s{quiet_color} | %(asctime)s{Style.RESET_ALL}', level=LOG_LEVEL)

def find_nth(haystack, needle, n):
	""" https://stackoverflow.com/questions/1883980/find-the-nth-occurrence-of-substring-in-a-string """
	start = haystack.find(needle)
	while start >= 0 and n > 1:
		start = haystack.find(needle, start+len(needle))
		n -= 1
	return start

text = pyperclip.paste()

print("Original Text:")
print(f"{Fore.RED}{text}{Style.RESET_ALL}")

#Strip invisibles
text = text.strip(" \"\t\n\r'")

add_root = False
if text[0] == "/":
	add_root = True

IS_MAC = True

# Split into sections and remove backslash-space feature
if IS_MAC:
	sections = text.split("/")
	
	del_idx = []
	for idx, s in enumerate(sections):
		if len(s) < 1:
			del_idx.append(idx)
		else:
			sections[idx] = s.replace("\ ", " ")
			sections[idx] = sections[idx].replace("\,", ",")
	for di in reversed(del_idx):
		del sections[di]
else:
	print(f"{Fore.RED}Not yet able to handle DOS.{Style.RESET_ALL}")

if add_root:
	sections.insert(0, "/")

print("\nDetected Sections:")
for ss in sections:
	print(f"\t{Fore.YELLOW}{ss}{Style.RESET_ALL}", flush=True)

if FORMAT_MATLAB:
	pass
else:
	text = f"os.path.join("
	
	need_comma = False
	
	for ss in sections:
		if need_comma:
			text += f', "{ss}"'
		else:
			text += f'"{ss}"'
			need_comma = True
	text += ")"

print("\nFormatted Text:")
print(f"{Fore.LIGHTBLUE_EX}{text}{Style.RESET_ALL}")

print("\nFormatted Text: (with hidden characters)")
print(f"{Fore.LIGHTBLACK_EX}{repr(text)}{Style.RESET_ALL}")

if not TEST_MODE:
	pyperclip.copy(text)