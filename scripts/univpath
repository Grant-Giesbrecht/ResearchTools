#!/usr/local/bin/python3

""" Analyzes a path (copied to the clipboard) and creates an os.path.join
Python command to create the path (making it cross-platform friendly). Use the
--matlab flag to create a MATLAB styled output string instead. The program needs
to determine if the input string is MacOS or DOS styled.

MacOS Paths:
 - Expected to start with '/' or './'

DOS Paths:
 - Expected to start with '<Letter>:\\' or '.\\'

If your string doesn't start with either of those patterns, specify the OS using
the --dos or --macos flags.
 
"""

# If user has copied a path, this will change the path into an
# os.path.join style universsal thing.
#
#

import pyperclip
from colorama import Fore, Style
import logging
import getopt, sys
import argparse

#TODO: Could automatically change title
#TODO: Could remove when percent signs and other special characters are done incorrectly
#TODO: Could remove abstract

TEST_MODE = False
LOG_LEVEL = logging.INFO
replacement_indentation = "\t"

FORMAT_MATLAB = False

#-----------------------------------------------------------
# Parse arguments

parser = argparse.ArgumentParser()
parser.add_argument("--matlab", help="Use MATLAB output formatting instead Python formatting.", action='store_true')
parser.add_argument("--test", help="Test mode; Only print what would happen, do not modify clipboard.", action='store_true')
parser.add_argument("--dos", help="Expect DOS/Windows input formatting.", action='store_true')
parser.add_argument("--macos", help="Expect MacOS input formatting.", action='store_true')
args = parser.parse_args()

#-----------------------------------------------------------

text = pyperclip.paste()

print("Original Text:")
print(f"{Fore.RED}{text}{Style.RESET_ALL}")

#Strip invisibles
text = text.strip(" \"\t\n\r'")



# Check for MacOS mode
if args.dos:
	IS_MAC = False
elif args.macos:
	IS_MAC = True
else:
	
	# MacOS Prefix
	if text[0] == '/' or text[:2] == "./":
		IS_MAC = True
	elif text[1:3] == ':\\' or text[:2] == ".\\":
		IS_MAC = False
	else:
		print(f"{Fore.RED}Failed to identify OS from input string. Aborting{Style.RESET_ALL}")
		sys.exit()


# Split into sections and remove backslash-space feature
if IS_MAC:
	
	add_root = False
	if text[0] == "/":
		add_root = True
	
	sections = text.split("/")
	
	del_idx = []
	for idx, s in enumerate(sections):
		if len(s) < 1:
			del_idx.append(idx)
		else:
			sections[idx] = s.replace("\ ", " ")
			sections[idx] = sections[idx].replace("\,", ",")
	for di in reversed(del_idx):
		del sections[di]
		
	if add_root:
		sections.insert(0, "/")
else:
	sections = text.split("\\")
	
	try:
		if sections[0][-1] == ":":
			sections[0] += '\\\\'
	except:
		pass

print("\nDetected Sections:")
for ss in sections:
	print(f"\t{Fore.YELLOW}{ss}{Style.RESET_ALL}", flush=True)

if args.matlab:
	text = f"fullfile("
	
	need_comma = False
	
	for ss in sections:
		if need_comma:
			text += f', "{ss}"'
		else:
			text += f'"{ss}"'
			need_comma = True
	text += ")"
else:
	text = f"os.path.join("
	
	need_comma = False
	
	for ss in sections:
		if need_comma:
			text += f', "{ss}"'
		else:
			text += f'"{ss}"'
			need_comma = True
	text += ")"

print("\nFormatted Text:")
print(f"{Fore.LIGHTBLUE_EX}{text}{Style.RESET_ALL}")

# print("\nFormatted Text: (with hidden characters)")
# print(f"{Fore.LIGHTBLACK_EX}{repr(text).strip()}{Style.RESET_ALL}")

if not args.test:
	pyperclip.copy(text)
else:
	print(f"Formatted text copied to clipboard.")