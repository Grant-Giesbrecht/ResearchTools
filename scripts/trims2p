#!/usr/local/bin/python3

from colorama import Fore, Style
import logging
import getopt, sys

trash_chars = "!" # List of characters that, if first character and not yet in boyd, indicate line should be thrown out.
TEST_MODE = False # Only display output, do not write output file.
PRINT_MODE = False # Print output file contents
LOG_LEVEL = logging.INFO
OUTPUT_NAME_MOD = "_trimmed" # Thing to add before extension to distinguish between input and output file
PROCESS_WITH_MOD = False # If the OUTPUT_NAME_MOD appears in filename, should this file still be trimmed (perhaps again)?

def trim2sp_single(filename:str):
	""" Trims a single S2P file """
	
	# Read file
	num_skip = 0
	outlines = []
	linenum = 0
	with open(filename, 'r') as fh:
		
		# Loop over each line
		while True:
			linenum += 1
			
			# Get new line, break when done
			line = fh.readline()
			if not line:
				break
			
			# Check for header trash
			if line[0] in trash_chars: # Skip char if matches trash
				logging.debug(f"{Fore.LIGHTBLACK_EX}\tSkipping line ({linenum}): {line}{Style.RESET_ALL}")
				num_skip += 1
				continue
			
			# Just add lines once in body
			outlines.append(line)

	logging.info(f"{Fore.LIGHTBLACK_EX}\tSkipped {num_skip} lines.{Style.RESET_ALL}")

	if not TEST_MODE:
		
		# Get output file name
		dot_idx = filename.find(".")
		if dot_idx == -1:
			filename_out = filename + OUTPUT_NAME_MOD
		else:
			filename_out = filename[:dot_idx] + OUTPUT_NAME_MOD + filename[dot_idx:]
		logging.info(f"{Fore.LIGHTBLACK_EX}\tWriting file '{filename_out}'{Style.RESET_ALL}")
		
		# Write file
		with open(filename_out, 'w') as foh:
			foh.writelines(outlines)
	
	if PRINT_MODE:
		print(f"{Fore.CYAN}\t[OUTPUT]{Fore.WHITE}:{Style.RESET_ALL}")
		
		NUM_EA_SIDE = 5
		
		for idx, line in enumerate(outlines):
			if idx <= NUM_EA_SIDE or len(outlines)-idx <= NUM_EA_SIDE:
				print(f"\t\t{line.rstrip()}")
			if idx == NUM_EA_SIDE+1:
				print(f"{Fore.CYAN}\t\t.\n\t\t.\n\t\t.{Style.RESET_ALL}")

#-----------------------------------------------------------

# Parse arguments, remove filenames
files = []
argv_check = []
argv_all = sys.argv[1:]
for arg_ in argv_all:	
	# Delete files
	if "." in arg_:
		
		# Check if file has already been trimemd
		if OUTPUT_NAME_MOD in arg_:
			if PROCESS_WITH_MOD: # Only double process if allowed
				files.append(arg_) # Add to file list
		else: # Add non-processed files
			files.append(arg_) # Add to file list
		
	else:
		# Add to list for getopt
		argv_check.append(arg_)

# Parse arguments
try:
	opts, args = getopt.getopt(argv_check, "h", ["help", "debug", "info", "warning", "error", "critical", "test", "print"])
except getopt.GetoptError as err:
	print("--help for help")
	sys.exit(2)

for opt, aarg in opts:	
	if opt in ("-h", "--help"):
		print(f"{Fore.RED}Just kidding I haven't made any help text yet. ~~OOPS~~{Style.RESET_ALL}")
		sys.exit()
	elif opt == "--debug":
		LOG_LEVEL = logging.DEBUG
	elif opt == "--info":
		LOG_LEVEL = logging.INFO
	elif opt == "--test":
		TEST_MODE = True
	elif opt == "--print":
		PRINT_MODE = True
	else:
		assert False, "unhandled option"
	# ...
#-----------------------------------------------------------

tabchar = "    "
prime_color = Fore.YELLOW
standard_color = Fore.WHITE
quiet_color = Fore.LIGHTBLACK_EX
cspecial = Fore.GREEN # COlor used to highlight content inside logging messages
logging.basicConfig(format=f'{prime_color}%(levelname)s:{standard_color} %(message)s{quiet_color} | %(asctime)s{Style.RESET_ALL}', level=LOG_LEVEL)

# Get filename
if len(files) < 1:
	logging.critical(f"{Fore.RED}Requires 1 argument, name of file to process.")
	exit()


for file in files:
	logging.info(f"Reading file  '{file}'")
	trim2sp_single(file)